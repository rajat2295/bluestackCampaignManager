{"version":3,"sources":["actions/action.js","utilities/contants/ListingPageConstants.js","components/GameDetails/GameName.js","components/GameDetails/GameIcons.js","components/GameDetails/PricingDetails.js","components/GameDetails/GameDate.js","components/GameDetails/GameActions.js","utilities/functions/utilityFunctions.js","components/ListTable/ListTable.js","components/ListTable/ListTableWrapper.js","components/ListPage.js","utilities/api/getListingApi.js","components/GameDetails/PricingPopup.js","components/Modal/Modal.js","components/Header/Header.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["sortList","listingData","dispatch","upcoming","live","past","map","row","date1","Date","createdOn","setHours","date2","push","type","payload","setListingData","data","openClosePopUp","cdnUrl","campaignNavConfig","label","value","imgList","calender","stats","csv","price","logo","memo","imageUrl","name","region","largeImage","className","alt","src","icon","clickHandler","calDate","ExampleCustomInput","onClick","popperPlacement","selected","onChange","date","customInput","e","connect","setRowData","gameInfo","rawDate","getFormattedDate","fromCurrent","getDateDifference","subText","Math","abs","changeDate","rowData","newDate","getState","getTime","config","element","dateFormatter","cell","campaignNameFormatter","image_url","viewDetailsFormatter","PricingDetails","actionFormatter","paramDate","currDate","ye","getFullYear","mo","getMonth","da","getDate","toString","padStart","round","ListTable","tableData","columns","dataField","text","headerStyle","width","formatter","keyField","ListTableWrapper","sortListData","useSelector","state","useState","tab","setTab","setTableData","useEffect","Container","ele","index","key","Row","ListPage","props","useDispatch","a","fetch","method","then","response","json","catch","err","console","log","length","pricing_Details","yearly","halfYearly","monthly","Modal","openClosePopUpLayer","id","style","display","PricingPopup","App","Boolean","window","location","hostname","match","initState","rootReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f598f72d.chunk.js","sourcesContent":["import { fetchListingData } from \"../utilities/api/getListingApi\";\n\n// Action to fetch listing data and store it in the store==>\nexport const getListingData = () => async (dispatch) => {\n    let listingData = {};\n    try {\n        listingData = await fetchListingData();\n        dispatch(sortList(listingData.data))\n        dispatch(setListingData(listingData));\n\t} catch (e) {\n        console.log('error')\n    }\n   \n}\n\n// Function to segregate the list into live, past and upcoming campaigns and store into store==>\nconst sortList =(listingData) => dispatch=> {\n    const upcoming=[];\n    const live=[];\n    const past=[]\n    listingData && listingData.map(row=>{\n        const date1= new Date(row.createdOn).setHours(0,0,0,0)\n        const date2 = new Date().setHours(0,0,0,0)\n        if(date1<date2)\n        past.push(row)\n        else if(date1===date2){\n            live.push(row)\n        }\n        else{\n            upcoming.push(row)\n        }\n    })\n    dispatch(({\n        type: 'SORT_LIST_DATA',\n        payload: {'upcoming':upcoming,'past':past,'live':live}\n    }))\n    return null;\n}\n\n// Dispatcher function to storeListing Data into store \nexport const setListingData = data => ({\n\ttype: 'SET_LISTING_DATA',\n\tpayload: { ...data }\n});\n\n// store the data of a particular Row===>\nexport const setRowData = data => ({\n    type: 'SET_ROW_DATA',\n\tpayload: { ...data }\n})\n\n// Action for toggling the popUpLayer==>\nexport const openClosePopUp = data => ({\n    type: 'OPEN_CLOSE_POPUP',\n\tpayload: data\n})\n\n/*action triggered when a date is changed from Calender component and then further \ncalls the sort list function ====> */\nexport const changeDate =(rowData,date) => (dispatch,getState)=>{\n    const  listingData  = getState().listingData;\n    listingData && listingData.data && listingData.data.map(row=> {\n        if(rowData.name===row.name){\n            row.createdOn = date.getTime()\n        }\n    })\n    dispatch(sortList(listingData.data));\n    return null;\n}\n","// cdn constant prefix==>\nconst cdnUrl='https://res.cloudinary.com/raxxx/image/upload/v1597517735/blueStackAssets'\n\n\n// Tab Config Constatnt==>\nexport const campaignNavConfig = [\n    {label:'Upcoming Campaigns',value:'upcoming'},\n    {label:'Live Campaigns',value:'live'},\n    {label:'Past Campaigns',value:'past'},\n]\n\n\n// Static assets path ==>\nexport const imgList = {\n    calender:`${cdnUrl}/calendar_hjshgi.png`,\n    stats:`${cdnUrl}/statistics-report_mfgvyq.png`,\n    csv:`${cdnUrl}/file_mpavws.png`,\n    price:`${cdnUrl}/Price_o7lx4f.png`,\n    logo:`${cdnUrl}/icons8-bluestacks-100_vrgwbv.png`\n}\n\n","import React, { memo } from 'react'\nimport './GameDetails.css'\n\n// Static Component that Displays image , name and region of the game==>\nconst GameName = ({imageUrl,name,region,largeImage}) => {\n    return(\n    <div className={`campainNameContainer ${largeImage?'largeImage':''}`} >\n        <div className=\"logo\"><img alt=\"largeThumb\" className={largeImage ?'largeThumb':'thumbImg'} src={imageUrl} /></div>\n        <div className=\"campaignName\">\n            <p>{name}</p>\n            <p>{region}</p>\n        </div>\n    </div >\n    )\n}\nexport default memo(GameName)","import React, { memo, Fragment } from 'react'\nimport './GameDetails.css'\n\n// list of icons csv calender price stats ==>\nimport { imgList } from '../../utilities/contants/ListingPageConstants'\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// Component for static icons and their respective actions like calender csv stats ==>\n\nconst GameIcons = ({ icon, label, clickHandler = () => { } , calDate}) => {\n\n    // custom input function for react-datepicker\n    const ExampleCustomInput = ({ value, onClick }) => (\n        <div className=\"gameIcon\" onClick={onClick}>\n        <span className=\"gameImg\"><img alt=\"thumbNail\" className=\"thumbImg\" src={imgList[icon]} /></span>\n        <span className=\"gameLabel\">{label}</span>\n    </div>\n      );\n\n    return (\n        \n            <Fragment>\n            {icon === 'calender' ?\n            // React-Datepicker component for selecting date\n                <Fragment>\n                    <DatePicker popperPlacement=\"auto-left\" selected={calDate} onChange={date => clickHandler(date)} customInput={<ExampleCustomInput />}/>\n                </Fragment>\n            :\n            <div className=\"gameIcon\" onClick={(e) => clickHandler(e)}>\n            <span className=\"gameImg\"><img  alt=\"thumbNail\" className=\"thumbImg\" src={imgList[icon]} /></span>\n            <span className=\"gameLabel\">{label}</span>\n        </div>\n\n        }\n        </Fragment>\n    )\n}\nexport default memo(GameIcons)\n","import React, { memo, Fragment } from 'react'\nimport './GameDetails.css'\nimport GameIcons from './GameIcons'\nimport {  connect } from 'react-redux'\nimport { setRowData, openClosePopUp } from '../../actions/action'\n\nconst pricingDetails = ({ gameInfo,setRowData,openClosePopUp }) => {\n\n    // click handler for opening pricing PopUp and set rowData==>\n    const pricingPopUpHandler = () => {\n        setRowData(gameInfo);\n        openClosePopUp(true);\n    }\n    return (\n        <Fragment>\n            <GameIcons clickHandler={pricingPopUpHandler} label='View Pricing' icon='price' />\n        </Fragment>\n    )\n}\n\nconst mapDispatchToProps =(dispatch) => ({\n    setRowData(data){\n        dispatch(setRowData(data))\n    },\n    openClosePopUp(data){\n        dispatch(openClosePopUp(data))\n    }\n})\nexport default connect(null,mapDispatchToProps)(memo(pricingDetails))\n\n","\nimport React, { memo } from 'react'\nimport './GameDetails.css'\nimport { getFormattedDate, getDateDifference } from '../../utilities/functions/utilityFunctions'\n\n// Compoennt to dispalay date published and the relative days from todays date==>\n\nconst GameDate = ({ rawDate }) => {\n    // function to get formatted Date ==>\n    const date= getFormattedDate(rawDate)\n\n    // function to get date Difference ==>\n    let fromCurrent=getDateDifference(rawDate)\n\n    // setting formatted text ==>\n    const subText = fromCurrent > 0 ?'Days Ago' :fromCurrent < 0 ? 'Days Ahead':'Live'\n\n    fromCurrent=Math.abs(fromCurrent);\n    \n    return (\n        <span className=\"date\">\n            <strong>{date}</strong>\n            <p>{subText !== 'Live'?fromCurrent:''} {subText}</p>\n        </span>\n\n    )\n}\nexport default memo(GameDate)","import React, { memo, Fragment } from 'react'\nimport './GameDetails.css'\nimport GameIcons from './GameIcons'\nimport { connect } from 'react-redux'\nimport { changeDate } from '../../actions/action'\n\nconst GameActions = ({changeDate,rowData}) => {\n\n    // fires the Action to Sort data and update table in the store ==>\n    const openCalender =(date) =>{\n        changeDate(rowData,date);\n    }\n\n    const config = [{\n        label: 'CSV',\n        icon: 'csv',\n    }, {\n        label: 'Report',\n        icon: 'stats',\n    }, {\n        label: 'Schedule Again',\n        icon: 'calender',\n        clickHandler : openCalender\n    }]\n\n    // reusing gameicon component parsing label icon and handlers with a custom click handler for calender compoennt ==>\n    return (\n        <Fragment>\n            {\n                config.map(element => <GameIcons label={element.label} icon={element.icon} clickHandler={element.clickHandler} calDate={rowData.createdOn}/>)\n            }\n        </Fragment>\n    )\n}\nconst mapDispatchToProps = dispatch => ({\n    changeDate(rowData,newDate){\n        dispatch(changeDate(rowData,newDate));\n    }\n})\nexport default connect(null,mapDispatchToProps)(memo(GameActions))","import React from 'react'\nimport GameName from '../../components/GameDetails/GameName';\nimport PricingDetails from '../../components/GameDetails/PricingDetails';\nimport GameDate from '../../components/GameDetails/GameDate';\nimport GameActions from '../../components/GameDetails/GameActions';\n\n// Formatter functions that return a formatted component for the particular column==>\nexport const dateFormatter = (cell) => {\n    return (\n        <GameDate rawDate={cell} />\n    );\n}\n\n// Formatter functions that return a formatted component for the particular column==>\nexport const campaignNameFormatter = (cell, row) => {\n    return (\n        <GameName imageUrl={row.image_url}\n        name={row.name}\n        region={row.region}/>\n    )\n}\n\n// Formatter functions that return a formatted component for the particular column==>\nexport const viewDetailsFormatter = (cell,row) => {\n    return (\n        <PricingDetails gameInfo={row} />\n    )\n}\n\n// Formatter functions that return a formatted component for the particular column==>\nexport const actionFormatter = (cell,row) => {\n    return (\n        <GameActions rowData={row} />\n    )\n}\n\n// to get Formatted Date ==>\nexport const getFormattedDate = paramDate => {\n    const currDate = new Date(paramDate)\n    const ye = currDate.getFullYear();\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const mo = monthNames[currDate.getMonth()+1]; \n    const da = currDate.getDate().toString().padStart(2, \"0\");\n    const date = `${mo} ${ye}, ${da}`;\n    return date\n}\n\n// to get day dfifference ==>\nexport const getDateDifference=(paramDate)=>{\n    const today = new Date()\n    let fromCurrent = (today.setHours(0,0,0,0) - new Date(paramDate).setHours(0,0,0,0)) / (24 * 60 * 60 * 1000)\n    fromCurrent = Math.round(fromCurrent)\n    return fromCurrent;\n\n}","import React from 'react'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { dateFormatter, campaignNameFormatter, viewDetailsFormatter, actionFormatter } from \"../../utilities/functions/utilityFunctions\";\nimport '../../css/ListTable.css'\n\nconst ListTable = ({tableData}) => {\n\n  // Header configuration with fieldname style and formatter==>\n    const columns = [{\n        dataField: 'createdOn',\n        text: 'DATE',\n         headerStyle: () => {\n           return {width:'15%'}\n         },\n        //  formatter to set date==>\n        formatter: dateFormatter,\n      }, {\n        dataField: 'name',\n        text: 'CAMPAIGN',\n        headerStyle: () => {\n          return {width:'30%'}\n        },\n        //  formatter to set name==>\n        formatter: campaignNameFormatter,\n      }, {\n        dataField: 'view',\n        text: 'VIEW',\n        headerStyle: () => {\n          return {width:'15%'}\n        },\n        //  formatter to set price details==>\n        formatter: viewDetailsFormatter,\n      }, {\n        dataField: 'action',\n        text: 'ACTION',\n        headerStyle: () => {\n          return {width:'40%'}\n        },\n        //  formatter to set action field buttons==>\n        formatter: actionFormatter,\n      }];\n\n      return(\n          <div className=\"listTable\" >\n        <BootstrapTable keyField='id' data={ tableData } columns={ columns } />\n        </div>\n        \n      )\n}\n\nexport default ListTable;","import React, { useState, useEffect } from \"react\"\nimport { Container, Row } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/ListTable.css'\nimport { campaignNavConfig } from \"../../utilities/contants/ListingPageConstants\";\nimport ListTable from \"./ListTable\";\nimport { useSelector } from \"react-redux\";\n\nconst ListTableWrapper = () => {\n\n    // get Sorted List in upcoming live and past campaigns\n    const sortListData = useSelector(state=>state.sortListData)\n\n    // get Tab name from store ==>\n    const [tab, setTab] = useState('upcoming');\n    // get table data from store==>\n    const [tableData,setTableData] = useState([]);\n    \n\n    useEffect(()=>{\n\n        // get the sorted list based on the current tab selected==>\n        setTableData(sortListData[tab]);\n\n    },[sortListData])\n\n\n    // function to change tabs from upcoming live and past and set table Data accordingly ==>\n    const changeTab = (type) => {\n\n        setTableData(sortListData[type]);\n        setTab(type)\n\n    }\n\n    return (\n        <div>\n            <Container>\n            <div className=\"title\">\n                <p>Manage Campaigns</p>\n            </div>\n                <div className='navBtn'>\n                    {/* constatnt config list iterated and rendered accordingly with respective values==> */}\n                    {campaignNavConfig.map((ele,index) =>\n                        <button key={`${ele.label}${index}`} onClick={() => changeTab(ele.value)} className={`panelBtn ${tab === ele.value ? 'active' : ''}`}>{ele.label}</button>)\n                        }\n                    <div className=' spacer16'></div>\n                </div>\n                <Row>\n                    <ListTable tableData={tableData} />\n                </Row>\n            </Container >\n        </div>\n    )\n}\n\n\nexport default (ListTableWrapper);","import { useSelector, useDispatch } from \"react-redux\"\nimport React, { useEffect } from \"react\"\nimport { getListingData } from \"../actions/action\"\nimport ListTableWrapper from \"./ListTable/ListTableWrapper\";\n\nconst ListPage = (props) => {\n\n    const dispatch = useDispatch();\n\n    // get table Data from the Store==>\n    const tableData = useSelector(state => state);\n\n    // initial function to initiate datat Fetching when component mounts ==>\n    useEffect(() => {\n        dispatch(getListingData());\n    }, []);\n\n\n\n    return (\n        <div className=\"tableRoot\">\n\n            {/* Displaye Table once the Data is populated in the store==> */}\n            {tableData.listingData && tableData.listingData.data.length > 0 && <ListTableWrapper />}\n            \n        </div>\n    )\n}\nexport default (ListPage)","export const fetchListingData = () => {\n\t\n\t// to fetch the Api and get table data==>\n\tconst url = `https://api.jsonbin.io/b/5f172d189180616628462efc/6`;\n\n\tlet resData = fetch(url, {\n\t\tmethod: 'GET'\n\t})\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\treturn data;\n\t\t})\n\t\t.catch(err => console.log('Fetcherr', err));\n\n\treturn resData;\n};","import React, { memo } from 'react'\nimport './GameDetails.css'\nimport GameName from './GameName'\nimport { connect } from 'react-redux'\n\nconst pricingPopup = ({ rowData }) => {\n    const {\n       pricing_Details:{\n        yearly,\n        halfYearly,\n        monthly,\n       }={},\n        image_url,\n        name,\n        region,\n    } = rowData\n    return (\n        <div className='pricePopUp'>\n\n            {/* Reusing Display Game Name And Image Static Component==> */}\n            <GameName imageUrl={image_url}\n                name={name}\n                region={region}\n                largeImage\n            />\n            {/* The Cost Card of the Tuple==> */}\n            <div className=\"pricingDetail\">\n                <h3 className=\"heading\">Pricing</h3>\n                <div className=\"content\">\n                    <div className=\"duration\n                                \"><p>1 Week - 1 Month</p><p>6 Months</p><p>1 Year</p>\n                    </div>\n                    <div className=\"cost\">\n                        <p>{monthly}</p><p>{halfYearly}</p><p>{yearly}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n// Fetching the Particular row Selected to show pricing details ==>\nconst mapStateToProps = state => {\n    const {\n        rowData = {}\n    } = state\n\n    return {\n        rowData,\n    }\n}\n\nexport default connect(mapStateToProps)(memo(pricingPopup))\n\n\n\n","import React, { Fragment } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport './Modal.css'\nimport PricingPopup from '../GameDetails/PricingPopup';\nimport { openClosePopUp } from '../../actions/action';\n\nconst Modal = () => {\n    \n    // To get the state of PopUp layer from the store==>\n    const openClosePopUpLayer = useSelector(state => state.openClosePopUpLayer); \n    \n    // initializing dispatch via hooks==>\n    const dispatch = useDispatch();\n\n    // Modal Container with a close button to change PopUplayer state in the store==>\n    return (\n        <Fragment>\n            {openClosePopUpLayer && <div id=\"myModal\" className=\"modal\" style={{ display: 'block', }}>\n                <div className=\"modal-content\">\n\n                    {/* Pricing Popup component==> */}\n                    <PricingPopup /> \n                    \n                    <div className=\"footer\">\n                        <div className=\"button-container\">\n                            <button onClick={() => dispatch(openClosePopUp(false))} className=\"closeModal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            }\n        </Fragment>\n    )\n}\n\nexport default Modal;","import React, { memo } from 'react'\nimport './Header.css'\nimport { imgList } from '../../utilities/contants/ListingPageConstants'\n\n// Static Header Component ===>\nconst Header = () => {\n    \n    return(\n        <header className=\"header\">\n            <div className='logo'>\n                <img alt=\"logo\" src={imgList.logo} />\n            </div>\n            </header>\n    )\n}\n\nexport default memo(Header);","import React from 'react';\nimport './App.css';\nimport ListPage from './components/ListPage';\nimport Modal from './components/Modal/Modal';\nimport Header from './components/Header/Header';\n\n// Root Directory of the project\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      {/* Modaly Layer For Price Detail */}\n      <Modal /> \n      {/* BlueStack Header */}\n      <Header />\n      {/* Main Content */}\n      <ListPage /> \n    </div>\n  );\n}\n\nexport default App;\n\n// Root Directory of the project","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    data: [],\n}\nconst rootReducer = (state = initState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case 'SET_LISTING_DATA':\n            return { ...state, listingData: payload };\n        case 'SET_ROW_DATA':\n            return { ...state, rowData: payload };\n        case 'OPEN_CLOSE_POPUP':\n            return { ...state, openClosePopUpLayer: payload };\n        case 'SORT_LIST_DATA':\n            return { ...state, sortListData: payload };\n            \n        default:\n            return state;\n    }\n}\nexport default rootReducer\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\nimport thunk from 'redux-thunk';\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store} >\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}